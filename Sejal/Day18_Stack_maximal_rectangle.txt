// Leetcode : 85. Maximal Rectangle
https://leetcode.com/problems/maximal-rectangle/


class Solution {
    public int maximalRectangle(char[][] matrix) {
     
    
            
        int n=matrix.length;
        if(n==0)
            return 0;
        int m=matrix[0].length;
        int heights[]=new int [m];
        int res=0;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                int num=matrix[i][j]-'0';
                heights[j]=num==0?0:heights[j]+num;
            }
                System.out.println(Arrays.toString(heights));
                res=Math.max(res,area(heights));
            
            
        }
        return res;
    }
    
    int area(int heights[])
    {
           Stack<Integer> s=new Stack<>();
        // Our aim is to find out the length left smallest and right smallest of each height
        int n=heights.length;
       int max=0;
        int width=0;
       
        for(int i=0;i<=heights.length;i++)
        {
         
                while(!s.isEmpty() && (i==n || heights[i]<=heights[s.peek()]))
                {
                    
                    int h=s.pop();
                    if(s.isEmpty())
                        width=i;
                    else 
                        width=i-s.peek()-1;
                    
                    max=Math.max(max,width*heights[h]);
                 ///   System.out.println(max);
                }
            
            s.push(i);
        }
        return max;
    
    }
}